[ + ] Register a user {POST}
[ + ] Login a user {FIND}
[ + ] Who am I {ACCESS TOKEN GENERATE WHO I AM}
[ + ] Refresh the token { REFRESH TOKEN }
[ + ] Logout the user{TOKEN GENERATE AND DELETE}

[ ] Add new product {IF USER IS ADMIN THEN THEY CAN DO THIS TASK}
[ ] Update a product {IF USER IS ADMIN THEN THEY CAN DO THIS TASK}
[ ] Get all products 
[ ] Get single product 
[ ] Delete a product {IF USER IS ADMIN THEN THEY CAN DO THIS TASK}

HERE WE ARE GENERATING TWO TOKENS

FOLDER STRUCTURES
1. CONFIG:- create index file in this folder
all variable under config.env can call from this file

2. CONTROLLER:- ONE FOLDER AUTH(AUTHICATION) AND 2 FILES 1 INDEX.JS ALL FILE UNDER AUTH FOLDER WILL BE CALL IN THIS AND 2ND FILE WILL BE PRODUCTCONTROLLER

3. MIDDLEWARE:- THREE FILE IN MIDDLEWARE
    I. ADMIN.JS:- ADMIN AUTHICATION
    II. AUTH.JS:- GIVING AUTHORIZATION 
    III. ERRORHANDLER:- THE ERROR WHICH PROVIDED BY BROWSER

4. MODEL:- 
    I. USER(CUSTOMER OR ADMIN)
    II. PRODUCT(ALL DETAILS ABOUT PRODUCT)
    III. REFRESHTOKEN:- ()

5. ROUTES:-
ALL ROUTER WILL BE CALL FROM HERE

6. SERVICES:- 
    I. JWTSERVICES
    II. CUSTOM_ERROR_HANDLER

7. UPLOADS:- 
    THE IMAGE FILE OF THE PRODUCT WILL BE DISPLAYED HERE

8. VALIDATOR:-
    IT WILL BE USED WHEN WE ARE PERFORMING ANY TASK/OPERATION THEN THE VALIDATION WILL BE PROVIDED FROM HERE


[ ]PACKAGES USED IN THIS REST API COURSE

1. ESM:- ES6 MODULE PROVIDER
2. JSON_Web_Token:- GIVING UNIQUE TOKENS
3. EXPRESS:- USED FOR CREATE REST API
4. MONGOOSE:- DATABASE 
5. MULTER :- FILE UPLOADER
6. BCRYPT:- FOR GIVING SECURITY ON PASSWORD
7. JOI:- FOR VALIDATION
8. DOTENV:- FOR Providing ENV. VARIABLE


[ - ]ERROR

1. Cannot use import statement outside a module
    solution:- restart the server once


2. Must call super constructor in derived class before accessing 'this' or returning from derived constructor.

solution:- put super() in constructor of customErrorHandler before this keyword